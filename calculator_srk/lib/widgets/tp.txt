// import 'package:math_expressions/math_expressions.dart';
// import 'package:flutter/material.dart';
// import 'package:google_fonts/google_fonts.dart';
// import './widgets/CalcButton.dart';

// void main() {
//   runApp(CalcApp());
// }

// class CalcApp extends StatefulWidget {
//   const CalcApp({Key key}) : super(key: key);
//   @override
//   CalcAppState createState() => CalcAppState();
// }

// class CalcAppState extends State<CalcApp> {
//   String _history = '';
//   String _expression = '';
//   void numClick(String text) {
//     setState(() => _expression += text);
//   }

//   void allClear(String text) {
//     setState(() {
//       _history = '';
//       _expression = '';
//     });
//   }

//   void clear(String text) {
//     setState(() {
//       _expression = '';
//     });
//   }

//   void evaluate(String text) {
//     Parser p = Parser();
//     Expression exp = p.parse(_expression);
//     ContextModel cm = ContextModel();
//     setState(() {
//       _history = _expression;
//       _expression = exp.evaluate(EvaluationType.REAL, cm).toString();
//     });
//   }

//   @override
//   Widget build(BuildContext context) {
//     return MaterialApp(
//       debugShowCheckedModeBanner: false,
//       title: 'Calculator',
//       home: Scaffold(
//         backgroundColor: Color(0xFF283637),
//         body: Container(
//           padding: EdgeInsets.all(12),
//           child: Column(
//             mainAxisAlignment: MainAxisAlignment.end,
//             children: <Widget>[
//               Container(
//                 child: Padding(
//                   padding: const EdgeInsets.only(right: 12),
//                   child: Text(
//                     _history,
//                     style: GoogleFonts.rubik(
//                       textStyle: TextStyle(
//                         fontSize: 24,
//                         color: Color(0xFF545F61),
//                       ),
//                     ),
//                   ),
//                 ),
//                 alignment: Alignment(1.0, 1.0),
//               ),
//               Container(
//                 child: Padding(
//                   padding: const EdgeInsets.all(12),
//                   child: Text(
//                     _expression,
//                     style: GoogleFonts.rubik(
//                       textStyle: TextStyle(
//                         fontSize: 48,
//                         color: Colors.white,
//                       ),
//                     ),
//                   ),
//                 ),
//                 alignment: Alignment(1.0, 1.0),
//               ),
//               SizedBox(height: 40),
//               Row(
//                 mainAxisAlignment: MainAxisAlignment.spaceEvenly,
//                 children: <Widget>[
//                   CalcButton(
//                     text: 'AC',
//                     fillColor: 0xFF6C807F,
//                     textSize: 20,
//                     callback: allClear,
//                   ),
//                   CalcButton(
//                     text: 'C',
//                     fillColor: 0xFF6C807F,
//                     callback: clear,
//                   ),
//                   CalcButton(
//                     text: '%',
//                     fillColor: 0xFFFFFFFF,
//                     textColor: 0xFF65BDAC,
//                     callback: numClick,
//                   ),
//                   CalcButton(
//                     text: '/',
//                     fillColor: 0xFFFFFFFF,
//                     textColor: 0xFF65BDAC,
//                     callback: numClick,
//                   ),
//                 ],
//               ),
//               Row(
//                 mainAxisAlignment: MainAxisAlignment.spaceEvenly,
//                 children: <Widget>[
//                   CalcButton(
//                     text: '7',
//                     callback: numClick,
//                   ),
//                   CalcButton(
//                     text: '8',
//                     callback: numClick,
//                   ),
//                   CalcButton(
//                     text: '9',
//                     callback: numClick,
//                   ),
//                   CalcButton(
//                     text: '*',
//                     fillColor: 0xFFFFFFFF,
//                     textColor: 0xFF65BDAC,
//                     textSize: 24,
//                     callback: numClick,
//                   ),
//                 ],
//               ),
//               Row(
//                 mainAxisAlignment: MainAxisAlignment.spaceEvenly,
//                 children: <Widget>[
//                   CalcButton(
//                     text: '4',
//                     callback: numClick,
//                   ),
//                   CalcButton(
//                     text: '5',
//                     callback: numClick,
//                   ),
//                   CalcButton(
//                     text: '6',
//                     callback: numClick,
//                   ),
//                   CalcButton(
//                     text: '-',
//                     fillColor: 0xFFFFFFFF,
//                     textColor: 0xFF65BDAC,
//                     textSize: 38,
//                     callback: numClick,
//                   ),
//                 ],
//               ),
//               Row(
//                 mainAxisAlignment: MainAxisAlignment.spaceEvenly,
//                 children: <Widget>[
//                   CalcButton(
//                     text: '1',
//                     callback: numClick,
//                   ),
//                   CalcButton(
//                     text: '2',
//                     callback: numClick,
//                   ),
//                   CalcButton(
//                     text: '3',
//                     callback: numClick,
//                   ),
//                   CalcButton(
//                     text: '+',
//                     fillColor: 0xFFFFFFFF,
//                     textColor: 0xFF65BDAC,
//                     textSize: 30,
//                     callback: numClick,
//                   ),
//                 ],
//               ),
//               Row(
//                 mainAxisAlignment: MainAxisAlignment.spaceEvenly,
//                 children: <Widget>[
//                   CalcButton(
//                     text: '.',
//                     callback: numClick,
//                   ),
//                   CalcButton(
//                     text: '0',
//                     callback: numClick,
//                   ),
//                   CalcButton(
//                     text: '00',
//                     callback: numClick,
//                     textSize: 26,
//                   ),
//                   CalcButton(
//                     text: '=',
//                     fillColor: 0xFFFFFFFF,
//                     textColor: 0xFF65BDAC,
//                     callback: evaluate,
//                   ),
//                 ],
//               )
//             ],
//           ),
//         ),
//       ),
//     );
//   }
// }








// send mail 



main() async {
  String username = 'username@gmail.com';
  String password = 'password';

  final smtpServer = gmail(username, password);
  // Use the SmtpServer class to configure an SMTP server:
  // final smtpServer = SmtpServer('smtp.domain.com');
  // See the named arguments of SmtpServer for further configuration
  // options.  

  // Create our message.
  final message = Message()
    ..from = Address(username, 'Your name')
    ..recipients.add('destination@example.com')
    ..ccRecipients.addAll(['destCc1@example.com', 'destCc2@example.com'])
    ..bccRecipients.add(Address('bccAddress@example.com'))
    ..subject = 'Test Dart Mailer library :: ðŸ˜€ :: ${DateTime.now()}'
    ..text = 'This is the plain text.\nThis is line 2 of the text part.'
    ..html = "<h1>Test</h1>\n<p>Hey! Here's some HTML content</p>";

  try {
    final sendReport = await send(message, smtpServer);
    print('Message sent: ' + sendReport.toString());
  } on MailerException catch (e) {
    print('Message not sent.');
    for (var p in e.problems) {
      print('Problem: ${p.code}: ${p.msg}');
    }
  }
  // DONE


  // Let's send another message using a slightly different syntax:
  //
  // Addresses without a name part can be set directly.
  // For instance `..recipients.add('destination@example.com')`
  // If you want to display a name part you have to create an
  // Address object: `new Address('destination@example.com', 'Display name part')`
  // Creating and adding an Address object without a name part
  // `new Address('destination@example.com')` is equivalent to
  // adding the mail address as `String`.
  final equivalentMessage = Message()
    ..from = Address(username, 'Your name ðŸ˜€')
    ..recipients.add(Address('destination@example.com'))
    ..ccRecipients.addAll([Address('destCc1@example.com'), 'destCc2@example.com'])
    ..bccRecipients.add('bccAddress@example.com')
    ..subject = 'Test Dart Mailer library :: ðŸ˜€ :: ${DateTime.now()}'
    ..text = 'This is the plain text.\nThis is line 2 of the text part.'
    ..html = '<h1>Test</h1>\n<p>Hey! Here is some HTML content</p><img src="cid:myimg@3.141"/>'
    ..attachments = [
      FileAttachment(File('exploits_of_a_mom.png'))
        ..location = Location.inline
        ..cid = '<myimg@3.141>'
    ];

  final sendReport2 = await send(equivalentMessage, smtpServer);

  // Sending multiple messages with the same connection
  //
  // Create a smtp client that will persist the connection
  var connection = PersistentConnection(smtpServer);

  // Send the first message
  await connection.send(message);

  // send the equivalent message
  await connection.send(equivalentMessage);

  // close the connection
  await connection.close();
}









